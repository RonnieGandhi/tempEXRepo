import DataType from 'sequelize';
import to from 'await-to-js';
import Model from '../../sequelize';

const invoAbi = JSON.stringify([ // eslint-disable-line
  {
    constant: false,
    inputs: [
      { name: 'addr', type: 'address' },
      { name: 'state', type: 'bool' },
    ],
    name: 'setTransferAgent',
    outputs: [],
    payable: false,
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'mintingFinished',
    outputs: [{ name: '', type: 'bool' }],
    payable: false,
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'name',
    outputs: [{ name: '', type: 'string' }],
    payable: false,
    type: 'function',
  },
  {
    constant: false,
    inputs: [
      { name: '_spender', type: 'address' },
      { name: '_value', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: 'success', type: 'bool' }],
    payable: false,
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', type: 'uint256' }],
    payable: false,
    type: 'function',
  },
  {
    constant: false,
    inputs: [
      { name: '_from', type: 'address' },
      { name: '_to', type: 'address' },
      { name: '_value', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: 'success', type: 'bool' }],
    payable: false,
    type: 'function',
  },
  {
    constant: false,
    inputs: [{ name: 'addr', type: 'address' }],
    name: 'setReleaseAgent',
    outputs: [],
    payable: false,
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', type: 'uint256' }],
    payable: false,
    type: 'function',
  },
  {
    constant: true,
    inputs: [{ name: 'addr', type: 'address' }],
    name: 'getReservedPercentageUnit',
    outputs: [{ name: 'inPercentageUnit', type: 'uint256' }],
    payable: false,
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'minCap',
    outputs: [{ name: '', type: 'uint256' }],
    payable: false,
    type: 'function',
  },
  {
    constant: false,
    inputs: [
      { name: 'receiver', type: 'address' },
      { name: 'amount', type: 'uint256' },
    ],
    name: 'mint',
    outputs: [],
    payable: false,
    type: 'function',
  },
  {
    constant: true,
    inputs: [{ name: '', type: 'address' }],
    name: 'mintAgents',
    outputs: [{ name: '', type: 'bool' }],
    payable: false,
    type: 'function',
  },
  {
    constant: false,
    inputs: [
      { name: 'addr', type: 'address' },
      { name: 'state', type: 'bool' },
    ],
    name: 'setMintAgent',
    outputs: [],
    payable: false,
    type: 'function',
  },
  {
    constant: false,
    inputs: [{ name: 'value', type: 'uint256' }],
    name: 'upgrade',
    outputs: [],
    payable: false,
    type: 'function',
  },
  {
    constant: true,
    inputs: [{ name: 'addr', type: 'address' }],
    name: 'getReservedPercentageDecimals',
    outputs: [{ name: 'inPercentageDecimals', type: 'uint256' }],
    payable: false,
    type: 'function',
  },
  {
    constant: false,
    inputs: [
      { name: '_name', type: 'string' },
      { name: '_symbol', type: 'string' },
    ],
    name: 'setTokenInformation',
    outputs: [],
    payable: false,
    type: 'function',
  },
  {
    constant: true,
    inputs: [{ name: '', type: 'address' }],
    name: 'reservedTokensList',
    outputs: [
      { name: 'inTokens', type: 'uint256' },
      { name: 'inPercentageUnit', type: 'uint256' },
      { name: 'inPercentageDecimals', type: 'uint256' },
      { name: 'isReserved', type: 'bool' },
      { name: 'isDistributed', type: 'bool' },
    ],
    payable: false,
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'upgradeAgent',
    outputs: [{ name: '', type: 'address' }],
    payable: false,
    type: 'function',
  },
  {
    constant: false,
    inputs: [],
    name: 'releaseTokenTransfer',
    outputs: [],
    payable: false,
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'upgradeMaster',
    outputs: [{ name: '', type: 'address' }],
    payable: false,
    type: 'function',
  },
  {
    constant: true,
    inputs: [{ name: 'addr', type: 'address' }],
    name: 'getReservedTokens',
    outputs: [{ name: 'inTokens', type: 'uint256' }],
    payable: false,
    type: 'function',
  },
  {
    constant: false,
    inputs: [{ name: 'addr', type: 'address' }],
    name: 'finalizeReservedAddress',
    outputs: [],
    payable: false,
    type: 'function',
  },
  {
    constant: true,
    inputs: [{ name: '_owner', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: 'balance', type: 'uint256' }],
    payable: false,
    type: 'function',
  },
  {
    constant: true,
    inputs: [{ name: '', type: 'uint256' }],
    name: 'reservedTokensDestinations',
    outputs: [{ name: '', type: 'address' }],
    payable: false,
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'getUpgradeState',
    outputs: [{ name: '', type: 'uint8' }],
    payable: false,
    type: 'function',
  },
  {
    constant: true,
    inputs: [{ name: '', type: 'address' }],
    name: 'transferAgents',
    outputs: [{ name: '', type: 'bool' }],
    payable: false,
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', type: 'address' }],
    payable: false,
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', type: 'string' }],
    payable: false,
    type: 'function',
  },
  {
    constant: true,
    inputs: [{ name: 'addr', type: 'address' }],
    name: 'isAddressReserved',
    outputs: [{ name: 'isReserved', type: 'bool' }],
    payable: false,
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'released',
    outputs: [{ name: '', type: 'bool' }],
    payable: false,
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'canUpgrade',
    outputs: [{ name: '', type: 'bool' }],
    payable: false,
    type: 'function',
  },
  {
    constant: false,
    inputs: [
      { name: '_to', type: 'address' },
      { name: '_value', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: 'success', type: 'bool' }],
    payable: false,
    type: 'function',
  },
  {
    constant: true,
    inputs: [{ name: 'addr', type: 'address' }],
    name: 'areTokensDistributedForAddress',
    outputs: [{ name: 'isDistributed', type: 'bool' }],
    payable: false,
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'reservedTokensDestinationsLen',
    outputs: [{ name: '', type: 'uint256' }],
    payable: false,
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'totalUpgraded',
    outputs: [{ name: '', type: 'uint256' }],
    payable: false,
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'releaseAgent',
    outputs: [{ name: '', type: 'address' }],
    payable: false,
    type: 'function',
  },
  {
    constant: false,
    inputs: [{ name: 'agent', type: 'address' }],
    name: 'setUpgradeAgent',
    outputs: [],
    payable: false,
    type: 'function',
  },
  {
    constant: true,
    inputs: [
      { name: '_owner', type: 'address' },
      { name: '_spender', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: 'remaining', type: 'uint256' }],
    payable: false,
    type: 'function',
  },
  {
    constant: false,
    inputs: [{ name: '_token', type: 'address' }],
    name: 'claimTokens',
    outputs: [],
    payable: false,
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'isToken',
    outputs: [{ name: 'weAre', type: 'bool' }],
    payable: false,
    type: 'function',
  },
  {
    constant: false,
    inputs: [
      { name: 'addrs', type: 'address[]' },
      { name: 'inTokens', type: 'uint256[]' },
      { name: 'inPercentageUnit', type: 'uint256[]' },
      { name: 'inPercentageDecimals', type: 'uint256[]' },
    ],
    name: 'setReservedTokensListMultiple',
    outputs: [],
    payable: false,
    type: 'function',
  },
  {
    constant: false,
    inputs: [{ name: 'newOwner', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
    payable: false,
    type: 'function',
  },
  {
    constant: false,
    inputs: [{ name: 'master', type: 'address' }],
    name: 'setUpgradeMaster',
    outputs: [],
    payable: false,
    type: 'function',
  },
  {
    inputs: [
      { name: '_name', type: 'string' },
      { name: '_symbol', type: 'string' },
      { name: '_initialSupply', type: 'uint256' },
      { name: '_decimals', type: 'uint256' },
      { name: '_mintable', type: 'bool' },
      { name: '_globalMinCap', type: 'uint256' },
    ],
    payable: false,
    type: 'constructor',
  },
  {
    anonymous: false,
    inputs: [
      { indexed: false, name: 'newName', type: 'string' },
      { indexed: false, name: 'newSymbol', type: 'string' },
    ],
    name: 'UpdatedTokenInformation',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      { indexed: true, name: '_token', type: 'address' },
      { indexed: true, name: '_controller', type: 'address' },
      { indexed: false, name: '_amount', type: 'uint256' },
    ],
    name: 'ClaimedTokens',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      { indexed: true, name: '_from', type: 'address' },
      { indexed: true, name: '_to', type: 'address' },
      { indexed: false, name: '_value', type: 'uint256' },
    ],
    name: 'Upgrade',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [{ indexed: false, name: 'agent', type: 'address' }],
    name: 'UpgradeAgentSet',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      { indexed: false, name: 'addr', type: 'address' },
      { indexed: false, name: 'state', type: 'bool' },
    ],
    name: 'MintingAgentChanged',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      { indexed: true, name: 'previousOwner', type: 'address' },
      { indexed: true, name: 'newOwner', type: 'address' },
    ],
    name: 'OwnershipTransferred',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      { indexed: false, name: 'receiver', type: 'address' },
      { indexed: false, name: 'amount', type: 'uint256' },
    ],
    name: 'Minted',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      { indexed: true, name: 'owner', type: 'address' },
      { indexed: true, name: 'spender', type: 'address' },
      { indexed: false, name: 'value', type: 'uint256' },
    ],
    name: 'Approval',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      { indexed: true, name: 'from', type: 'address' },
      { indexed: true, name: 'to', type: 'address' },
      { indexed: false, name: 'value', type: 'uint256' },
    ],
    name: 'Transfer',
    type: 'event',
  },
]);

const trzAbi = JSON.stringify([
  {
    constant: true,
    inputs: [],
    name: 'mintingFinished',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'name',
    outputs: [
      {
        name: '',
        type: 'string',
      },
    ],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: false,
    inputs: [
      {
        name: '_spender',
        type: 'address',
      },
      {
        name: '_value',
        type: 'uint256',
      },
    ],
    name: 'approve',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'totalSupply',
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: false,
    inputs: [
      {
        name: '_from',
        type: 'address',
      },
      {
        name: '_to',
        type: 'address',
      },
      {
        name: '_value',
        type: 'uint256',
      },
    ],
    name: 'transferFrom',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'decimals',
    outputs: [
      {
        name: '',
        type: 'uint8',
      },
    ],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'cap',
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: false,
    inputs: [
      {
        name: '_to',
        type: 'address',
      },
      {
        name: '_amount',
        type: 'uint256',
      },
    ],
    name: 'mint',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: false,
    inputs: [
      {
        name: '_spender',
        type: 'address',
      },
      {
        name: '_subtractedValue',
        type: 'uint256',
      },
    ],
    name: 'decreaseApproval',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: true,
    inputs: [
      {
        name: '',
        type: 'address',
      },
    ],
    name: 'unlockTimes',
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [
      {
        name: '_owner',
        type: 'address',
      },
    ],
    name: 'balanceOf',
    outputs: [
      {
        name: 'balance',
        type: 'uint256',
      },
    ],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: false,
    inputs: [],
    name: 'finishMinting',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'owner',
    outputs: [
      {
        name: '',
        type: 'address',
      },
    ],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'symbol',
    outputs: [
      {
        name: '',
        type: 'string',
      },
    ],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: false,
    inputs: [
      {
        name: '_spender',
        type: 'address',
      },
      {
        name: '_addedValue',
        type: 'uint256',
      },
    ],
    name: 'increaseApproval',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: true,
    inputs: [
      {
        name: '_owner',
        type: 'address',
      },
      {
        name: '_spender',
        type: 'address',
      },
    ],
    name: 'allowance',
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: false,
    inputs: [
      {
        name: 'newOwner',
        type: 'address',
      },
    ],
    name: 'transferOwnership',
    outputs: [],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_cap',
        type: 'uint256',
      },
    ],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        name: 'to',
        type: 'address',
      },
      {
        indexed: false,
        name: 'amount',
        type: 'uint256',
      },
    ],
    name: 'Mint',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [],
    name: 'MintFinished',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        name: 'previousOwner',
        type: 'address',
      },
      {
        indexed: true,
        name: 'newOwner',
        type: 'address',
      },
    ],
    name: 'OwnershipTransferred',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        name: 'owner',
        type: 'address',
      },
      {
        indexed: true,
        name: 'spender',
        type: 'address',
      },
      {
        indexed: false,
        name: 'value',
        type: 'uint256',
      },
    ],
    name: 'Approval',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        name: 'from',
        type: 'address',
      },
      {
        indexed: true,
        name: 'to',
        type: 'address',
      },
      {
        indexed: false,
        name: 'value',
        type: 'uint256',
      },
    ],
    name: 'Transfer',
    type: 'event',
  },
  {
    constant: false,
    inputs: [
      {
        name: '_to',
        type: 'address',
      },
      {
        name: '_value',
        type: 'uint256',
      },
    ],
    name: 'transfer',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: false,
    inputs: [
      {
        name: 'wallet',
        type: 'address',
      },
      {
        name: 'unlockTime',
        type: 'uint256',
      },
    ],
    name: 'blockUntil',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
]);

const Token = Model.define('Token', {
  id: {
    type: DataType.INTEGER(11),
    allowNull: false,
    primaryKey: true,
    autoIncrement: true,
  },
  name: {
    type: DataType.STRING(50),
    allowNull: false,
  },
  contractAddress: {
    type: DataType.STRING(1000),
    allowNull: true,
  },
  contractAbi: {
    type: DataType.STRING(10000),
    allowNull: true,
  },
  symbol: {
    type: DataType.STRING(50),
    allowNull: false,
  },
  decimalPrecision: {
    type: DataType.INTEGER(11),
    allowNull: false,
  },
  issuedByPlatform: {
    type: DataType.BOOLEAN,
    allowNull: false,
  },
  logoUrl: {
    type: DataType.STRING(1000),
    allowNull: false,
  },
  marketCap: {
    type: DataType.INTEGER(11),
    allowNull: true,
  },
  tokenCap: {
    type: DataType.DECIMAL(21, 9),
    allowNull: true,
  },
  minimumWithdrawalAmount: {
    type: DataType.DECIMAL(21, 9),
    allowNull: false,
    defaultValue: 0,
  },
  withdrawalFee: {
    type: DataType.DECIMAL(15, 6),
    allowNull: false,
    defaultValue: 0,
  },
  enabled: {
    type: DataType.BOOLEAN,
    allowNull: false,
    defaultValue: false,
  },
  confirmationRequired: {
    type: DataType.INTEGER,
    allowNull: false,
    defaultValue: 10,
  },
  usdPrice: {
    type: DataType.DECIMAL(15, 2),
    allowNull: false,
  },
  privateSaleEnabled: {
    type: DataType.BOOLEAN,
    allowNull: false,
    defaultValue: false,
  },
  maxAllowedAmountForBuy: {
    type: DataType.INTEGER,
    allowNull: false,
    defaultValue: 10000,
  },
});

export const tokens = [
  {
    id: 1,
    typeId: 2,
    categoryId: 1,
    name: 'Ethereum',
    symbol: 'ETH',
    logoUrl: `ether-logo.png`,
    decimalPrecision: 8,
    issuedByPlatform: false,
    // minimumTradeAmount: null,
    minimumWithdrawalAmount: 0.02,
    withdrawalFee: 0.01,
    tokenCap: 100000000,
    marketCap: null,
    contractAddress: null,
    enabled: true,
    confirmationRequired: 10,
    usdPrice: 262,
    privateSaleEnabled: false,
  },
  // {
  //   id: 1,
  //   typeId: 2,
  //   categoryId: 2,
  //   name: 'invo',
  //   symbol: 'INVO',
  //   logoUrl: `invo-logo.png`,
  //   decimalPrecision: 6,
  //   issuedByPlatform: true,
  //   // minimumTradeAmount: null,
  //   // minimumWithdrawalAmount: null,
  //   // withdrawalFee: null,
  //   tokenCap: null,
  //   marketCap: null,
  //   contractAddress: '0x3b108A79d266e270891A9BF9187d610Ce8106dbD',
  //   contractAbi: erc20Abi,
  //   enabled: true,
  // },
  // {
  //   id: 2,
  //   typeId: 2,
  //   categoryId: 2,
  //   name: 'telegram pay',
  //   symbol: 'TLP',
  //   logoUrl: `invo-logo.png`,
  //   decimalPrecision: 6,
  //   issuedByPlatform: true,
  //   // minimumTradeAmount: null,
  //   // minimumWithdrawalAmount: null,
  //   // withdrawalFee: null,
  //   tokenCap: null,
  //   marketCap: null,
  //   contractAddress: '0x60e1c6Fc34BF02b03EeF4c336b7f10f35Ea3Fa3B',
  //   contractAbi: erc20Abi,
  //   enabled: true,
  // },
  // {
  //   id: 3,
  //   typeId: 2,
  //   categoryId: 1,
  //   name: 'USD peg',
  //   symbol: 'USD',
  //   logoUrl: `invo-logo.png`,
  //   decimalPrecision: 6,
  //   issuedByPlatform: true,
  //   // minimumTradeAmount: null,
  //   // minimumWithdrawalAmount: null,
  //   // withdrawalFee: null,
  //   tokenCap: null,
  //   marketCap: null,
  //   contractAddress: '0xe88F4c522da8DD715459903728B3b67bE7Ab78D0',
  //   contractAbi: erc20Abi,
  //   enabled: true,
  // },
  // {
  //   id: 2,
  //   typeId: 3,
  //   categoryId: 1,
  //   name: 'tether',
  //   symbol: 'USDT',
  //   logoUrl: `tether-logo.png`,
  //   decimalPrecision: 6,
  //   issuedByPlatform: false,
  //   // minimumTradeAmount: null,
  //   // minimumWithdrawalAmount: null,
  //   // withdrawalFee: null,
  //   tokenCap: null,
  //   marketCap: null,
  //   contractAddress: null,
  //   enabled: false,
  // },
  {
    id: 2,
    typeId: 1,
    categoryId: 1,
    name: 'Bitcoin',
    symbol: 'BTC',
    logoUrl: `bitcoin-logo.png`,
    decimalPrecision: 8,
    issuedByPlatform: false,
    // minimumTradeAmount: null,
    minimumWithdrawalAmount: 0.002,
    withdrawalFee: 0.001,
    tokenCap: 21000000,
    marketCap: null,
    contractAddress: null,
    contractAbi: null,
    enabled: true,
    usdPrice: 8400,
    confirmationRequired: 6,
  },
  {
    id: 3,
    typeId: 2,
    categoryId: 2,
    name: 'Invo',
    symbol: 'INVO',
    logoUrl: `invo-logo.png`,
    decimalPrecision: 8,
    issuedByPlatform: true,
    // minimumTradeAmount: null,
    minimumWithdrawalAmount: 50,
    withdrawalFee: 10,
    tokenCap: 888000000,
    marketCap: null,
    contractAddress: '0x3b108A79d266e270891A9BF9187d610Ce8106dbD',
    contractAbi: invoAbi,
    enabled: true,
    confirmationRequired: 10,
    usdPrice: 0.08,
    privateSaleEnabled: true,
    maxAllowedAmountForBuy: 10000,
  },
  // {
  //   id: 4,
  //   typeId: 2,
  //   categoryId: 2,
  //   name: 'AiChatBot',
  //   symbol: 'ACB',
  //   logoUrl: `invo-logo.png`,
  //   decimalPrecision: 8,
  //   issuedByPlatform: false,
  //   // minimumTradeAmount: null,
  //   minimumWithdrawalAmount: 0.002,
  //   // withdrawalFee: null,
  //   tokenCap: null,
  //   marketCap: null,
  //   contractAddress: null,
  //   contractAbi: erc20Abi,
  //   enabled: true,
  //   confirmationRequired: 10,
  // },
  {
    id: 4,
    typeId: 2,
    categoryId: 2,
    name: 'Tradiz',
    symbol: 'TRZ',
    logoUrl: `tradiz-logo.png`,
    decimalPrecision: 8,
    issuedByPlatform: true,
    // minimumTradeAmount: null,
    minimumWithdrawalAmount: 10,
    withdrawalFee: 2,
    tokenCap: 888000000,
    marketCap: null,
    contractAddress: '0xFCCb9Cc0aF1033bD78A0617de8423304360C9a18',
    contractAbi: trzAbi,
    enabled: true,
    confirmationRequired: 10,
    usdPrice: 0.5,
    privateSaleEnabled: true,
    maxAllowedAmountForBuy: 10000,
  },
  // {
  //   id: 6,
  //   typeId: 2,
  //   categoryId: 2,
  //   name: 'Carnition',
  //   symbol: 'CRN',
  //   logoUrl: `invo-logo.png`,
  //   decimalPrecision: 8,
  //   issuedByPlatform: false,
  //   // minimumTradeAmount: null,
  //   minimumWithdrawalAmount: 0.002,
  //   // withdrawalFee: null,
  //   tokenCap: null,
  //   marketCap: null,
  //   contractAddress: null,
  //   contractAbi: erc20Abi,
  //   enabled: true,
  //   confirmationRequired: 10,
  // },
  // {
  //   id: 7,
  //   typeId: 2,
  //   categoryId: 2,
  //   name: 'AiTrader',
  //   symbol: 'AIT',
  //   logoUrl: `invo-logo.png`,
  //   decimalPrecision: 8,
  //   issuedByPlatform: false,
  //   // minimumTradeAmount: null,
  //   minimumWithdrawalAmount: 0.002,
  //   // withdrawalFee: null,
  //   tokenCap: null,
  //   marketCap: null,
  //   contractAddress: null,
  //   contractAbi: erc20Abi,
  //   enabled: true,
  //   confirmationRequired: 10,
  // },
  // {
  //   id: 3,
  //   typeId: 3,
  //   categoryId: 1,
  //   name: 'Tether',
  //   symbol: 'USDT',
  //   logoUrl: `tether-logo.png`,
  //   decimalPrecision: 8,
  //   issuedByPlatform: false,
  //   // minimumTradeAmount: null,
  //   minimumWithdrawalAmount: 1,
  //   // withdrawalFee: null,
  //   tokenCap: null,
  //   marketCap: null,
  //   contractAddress: null,
  //   contractAbi: null,
  //   enabled: true,
  //   confirmationRequired: 6,
  // },
  // {
  //   id: 4,
  //   typeId: 3,
  //   categoryId: 1,
  //   name: 'Ripple',
  //   symbol: 'XRP',
  //   logoUrl: `ripple-logo.png`,
  //   decimalPrecision: 8,
  //   issuedByPlatform: false,
  //   // minimumTradeAmount: null,
  //   minimumWithdrawalAmount: 1,
  //   // withdrawalFee: null,
  //   tokenCap: null,
  //   marketCap: null,
  //   contractAddress: null,
  //   contractAbi: null,
  //   enabled: true,
  //   confirmationRequired: 6,
  // },
  // {
  //   id: 5,
  //   typeId: 3,
  //   categoryId: 1,
  //   name: 'Litecoin',
  //   symbol: 'LTC',
  //   logoUrl: `litecoin-logo.png`,
  //   decimalPrecision: 8,
  //   issuedByPlatform: false,
  //   // minimumTradeAmount: null,
  //   minimumWithdrawalAmount: 0.1,
  //   // withdrawalFee: null,
  //   tokenCap: null,
  //   marketCap: null,
  //   contractAddress: null,
  //   contractAbi: null,
  //   enabled: true,
  //   confirmationRequired: 6,
  // },
  // {
  //   id: 6,
  //   typeId: 3,
  //   categoryId: 1,
  //   name: 'EOS',
  //   symbol: 'EOS',
  //   logoUrl: `eos-logo.png`,
  //   decimalPrecision: 8,
  //   issuedByPlatform: false,
  //   // minimumTradeAmount: null,
  //   minimumWithdrawalAmount: 1,
  //   // withdrawalFee: null,
  //   tokenCap: null,
  //   marketCap: null,
  //   contractAddress: null,
  //   contractAbi: null,
  //   enabled: true,
  //   confirmationRequired: 6,
  // },
  // {
  //   id: 7,
  //   typeId: 3,
  //   categoryId: 1,
  //   name: 'Bitcoin Cache',
  //   symbol: 'BCH',
  //   logoUrl: `bch-logo.png`,
  //   decimalPrecision: 8,
  //   issuedByPlatform: false,
  //   // minimumTradeAmount: null,
  //   minimumWithdrawalAmount: 0.1,
  //   // withdrawalFee: null,
  //   tokenCap: null,
  //   marketCap: null,
  //   contractAddress: null,
  //   contractAbi: null,
  //   enabled: true,
  //   confirmationRequired: 6,
  // },
  // {
  //   id: 8,
  //   typeId: 2,
  //   categoryId: 2,
  //   name: 'Invo',
  //   symbol: 'INVO',
  //   logoUrl: `invo-logo.png`,
  //   decimalPrecision: 8,
  //   issuedByPlatform: false,
  //   // minimumTradeAmount: null,
  //   minimumWithdrawalAmount: 1,
  //   // withdrawalFee: null,
  //   tokenCap: null,
  //   marketCap: null,
  //   contractAddress: null,
  //   contractAbi: null,
  //   enabled: true,
  //   confirmationRequired: 6,
  // },
  // {
  //   id: 9,
  //   typeId: 2,
  //   categoryId: 2,
  //   name: 'Binance coin',
  //   symbol: 'BNB',
  //   logoUrl: `bnb-logo.png`,
  //   decimalPrecision: 8,
  //   issuedByPlatform: false,
  //   // minimumTradeAmount: null,
  //   minimumWithdrawalAmount: 0.1,
  //   // withdrawalFee: null,
  //   tokenCap: null,
  //   marketCap: null,
  //   contractAddress: null,
  //   contractAbi: null,
  //   enabled: true,
  //   confirmationRequired: 10,
  // },
  // {
  //   id: 10,
  //   typeId: 3,
  //   categoryId: 1,
  //   name: 'Neo coin',
  //   symbol: 'NEO',
  //   logoUrl: `neo-logo.png`,
  //   decimalPrecision: 8,
  //   issuedByPlatform: false,
  //   // minimumTradeAmount: null,
  //   minimumWithdrawalAmount: 0.1,
  //   // withdrawalFee: null,
  //   tokenCap: null,
  //   marketCap: null,
  //   contractAddress: null,
  //   contractAbi: null,
  //   enabled: true,
  //   confirmationRequired: 6,
  // },
  // {
  //   id: 11,
  //   typeId: 3,
  //   categoryId: 1,
  //   name: 'Monero coin',
  //   symbol: 'XMR',
  //   logoUrl: `monero-logo.png`,
  //   decimalPrecision: 8,
  //   issuedByPlatform: false,
  //   // minimumTradeAmount: null,
  //   minimumWithdrawalAmount: 0.1,
  //   // withdrawalFee: null,
  //   tokenCap: null,
  //   marketCap: null,
  //   contractAddress: null,
  //   contractAbi: null,
  //   enabled: true,
  //   confirmationRequired: 6,
  // },
  // {
  //   id: 3,
  //   typeId: 2,
  //   categoryId: 2,
  //   name: 'Tradiz',
  //   symbol: 'TRC',
  //   logoUrl: `tether-logo.png`,
  //   decimalPrecision: 6,
  //   issuedByPlatform: true,
  //   // minimumTradeAmount: null,
  //   minimumWithdrawalAmount: 1,
  //   // withdrawalFee: null,
  //   tokenCap: null,
  //   marketCap: null,
  //   contractAbi: erc20Abi,
  //   contractAddress: '0x3b108A79d266e270891A9BF9187d610Ce8106dbD', // TODO: This is invo contract address change it to trc
  //   enabled: true,
  //   confirmationRequired: 10,
  // },
  // {
  //   id: 5,
  //   typeId: 2,
  //   categoryId: 2,
  //   name: 'AiChatDoc',
  //   symbol: 'AiChatDoc',
  //   logoUrl: `ether-logo.png`,
  //   decimalPrecision: 6,
  //   issuedByPlatform: false,
  //   // minimumTradeAmount: null,
  //   // minimumWithdrawalAmount: null,
  //   // withdrawalFee: null,
  //   tokenCap: null,
  //   marketCap: null,
  //   contractAddress: null,
  //   enabled: false,
  // },
  // {
  //   id: 6,
  //   typeId: 2,
  //   categoryId: 2,
  //   name: 'AiTrader',
  //   symbol: 'AiTrader',
  //   logoUrl: `ether-logo.png`,
  //   decimalPrecision: 6,
  //   issuedByPlatform: false,
  //   // minimumTradeAmount: null,
  //   // minimumWithdrawalAmount: null,
  //   // withdrawalFee: null,
  //   tokenCap: null,
  //   marketCap: null,
  //   contractAddress: null,
  //   enabled: false,
  // },
];

export const initialize = async () => {
  const [err] = await to(
    Token.bulkCreate(tokens, {
      fields: Object.keys(tokens[0]),
      updateOnDuplicate: 'id',
    }),
  );

  if (err) {
    console.warn(`problem with adding initial data to Token table: `, err);
  } else {
    console.warn(`initial rows added to Token table successfully.`);
  }
};

export default Token;
